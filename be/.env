# should be either local, dev, or prod
ENVIRONMENT=local

# hasura uses this to determine what roll this project has when making api calls
# this token is for role:  admin-nestjs
ADMIN_NESTJS=BE_ADMIN_NESTJS

# url of hasura gateway for relay endpoint
GRAPHQL_ENDPOINT=http://gateway:8080/v1beta1/relay

# url of hasura gateway for non-relay endpoint
GRAPHQL_ENDPOINT_NONRELAY=http://gateway:8080/v1/graphql

# graphql jwt secret
GRAPHQL_JWT_SECRET=BE_GRAPHQL_JWT_SECRET

# port is needed because it's different locally than in dev and prod
PORT=3000

# this is more or less an api key; any request received here in nest must have this api key. if the api key is not
# included in the request, the request will be rejected. note that the root endpoint is not included in this check,
# it is unprotected so we can do health checks to it
AUTH_KEY=LCNESTAUTH

# sentry.io vars, these are needed to integrate sentry error logging
SENTRY_DSN=https://77fff981a28a41258840342eef461a48@o117416.ingest.sentry.io/5952878
SENTRY_ENVIRONMENT=local

# cron monitor, only pinged in prod
CRONMONITOR_API_KEY=secret

# coassemble api endpoint
#   important: coassemble doesn't allow their free tier accounts api access, so we don't have a dev url
#   dev: none
#   prod: https://languageconvo.coassemble.com/api/v1/
COASSEMBLE_BASE_URL=removedforsafety
# coassemble api key. see notion for how to generate this, it is not trivial
COASSEMBLE_AUTH_TOKEN=secret

# coassemble group id of group that teacher is added once they start teaching with us
#   local   none
#   dev     none
#   prod    group id of coassemble group that teacher is added to after they start teaching with us
COASSEMBLE_GROUP_ID=secret

# twist chat api url
#   important: we don't have a company dev twist account, so if you're developing for twist we'll probably need
#   to create one.
#   dev: none
#   prod: https://api.twist.com/api/
TWIST_BASE_URL=removedforsafety
TWIST_AUTH_TOKEN=secret

# Twist teacher success team channel id
#   This is the channel teacher's twist thread is moved into after they are onboard are and ready to start teaching
TWIST_TEACH_CHANNEL_ID=secret

# rocketchat api vars
#   important: we don't have a company dev rocketchat account, so if you're developing for twist we'll probably need
#   to create one.
#   dev: none
#   prod: https://teamchat.languageconvo.com/api/
ROCKET_BASE_URL=https://teamchat.languageconvo.com/api/
ROCKET_AUTH_TOKEN=secret
ROCKET_USER_ID=secret

# rocketchat channels after teacher gets started
#   local   none, we don't have local/dev rocketchat instance
#   dev     none, we don't have local/dev rocketchat instance
#   prod    production rocket channel channel ids of channels
#           announcements, general-team, website-updates
ROCKET_CHANNEL_ANNOUNCEMENTS=secret
ROCKET_CHANNEL_GENERAL_TEAM=secret
ROCKET_CHANNEL_WEBSITE_UPDATES=secret

# php monolith vars. used to make api calls to old php api
INTERNAL_API_BASE_URL=https://172.18.0.1:8000/studenthome/?WebhookInternalApi=1
INTERNAL_API_KEY=BE_INTERNAL_API_KEY
# NEVER SET THIS IN PROD!
# This allows unsafe, self-signed ssl certs. In order for us to allow be to call php with axios
# we set this. It would have been more difficult/dangerous in our opinion to config axios to
# allow unsigned certs only in local development. Doing it here was safer -- JUST NEVER SET THIS
# ENV VAR IN PRODUCTION!
NODE_TLS_REJECT_UNAUTHORIZED=0

# stytch api url, because we have separate Stytch projects for students and for teachers
#   local, dev: https://test.stytch.com/v1/
#   prod: https://stytch.com/v1/
STYTCH_BASE_URL=https://test.stytch.com/v1/
# stytch auth token. this is a bas64 encoding of stytch project id and stych secret. in php you would create it this
# way: base64_encode("stytch-project-id:stytch-secret")
#   local, dev: secret
#   prod: secret
STYTCH_AUTH_TOKEN=BE_STYTCH_AUTH_TOKEN
# stytch url for email auth. this is the url that user is directed to from the login email
# 	local: https://127.0.0.1:3007/auth
#	dev: https://teach.speakfluentlytoday.com/auth
#	prod: https://teach.languageconvo.com/auth
STYTCH_LOGIN_URL=https://127.0.0.1:3007/auth
# stytch url for password reset email. This is the url that user is directed to reset their new Stytch password. This password
# will be used to login to our new webapp
# 	local: https://127.0.0.1:3007/pwdreset
#	dev: https://teach.speakfluentlytoday.com/pwdreset
#	prod: https://teach.languageconvo.com/pwdreset
STYTCH_PWD_RESET_URL=https://127.0.0.1:3007/pwdreset

# stytch API for students, because we have separate Stytch projects for students and for teachers
# stytch auth token. this is a bas64 encoding of stytch project id and stych secret. in php you would create it this
# way: base64_encode("stytch-project-id:stytch-secret")
#   local, dev: secret
#   prod: secret
STYTCH_AUTH_TOKEN_STUDENTS=BE_STYTCH_AUTH_TOKEN_STUDENTS
# stytch url for email auth. this is the url that user is directed to from the login email
# 	local: https://127.0.0.1:4007/auth
#	dev: https://app.speakfluentlytoday.com/auth
#	prod: https://app.languageconvo.com/auth
STYTCH_LOGIN_URL_STUDENTS=https://127.0.0.1:4007/auth
# stytch url for password reset email. This is the url that user is directed to reset their new Stytch password. This password
# will be used to login to our new webapp
# 	local: https://127.0.0.1:4007/pwdreset
#	dev: https://app.speakfluentlytoday.com/pwdreset
#	prod: https://app.languageconvo.com/pwdreset
STYTCH_PWD_RESET_URL_STUDENTS=https://127.0.0.1:4007/pwdreset

# tokbox api key
# 	local, dev: tokbox api key of our dev project
#	prod: tokbox api key of our prod project
OPENTOK_API_KEY=tokbox_api_key
# tokbox api secret
# 	local, dev: tokbox api secrect of our dev project
#	prod: tokbox api secrect of prod project
OPENTOK_API_SECRET=tokbox_secret

# postmark server token
# 	local, dev: server token of our dev project
#	prod: server token of our prod project
POSTMARK_SERVER_TOKEN=BE_POSTMARK_SERVER_TOKEN
# postmark base url
# 	local, dev, prod: https://api.postmarkapp.com/
POSTMARK_BASE_URL=https://api.postmarkapp.com/

# payoneer base url. This will be used to make actual payoneer API calls once bearer token is generated
#   local, dev: payoneer sandbox base url
#   prod: payoneer live API base url
PAYONEER_API_BASE_URL=https://api.sandbox.payoneer.com/v4/
# payoneer api authorization url. This will be used to generate payoneer bearer auth token
#   local, dev: payoneer sandbox authorization url
#   prod: payoneer live API authorization url
PAYONEER_API_AUTHORIZATION_URL=https://login.sandbox.payoneer.com/api/v2/
# payoneer program id
#   local, dev: payoneer sandbox program id
#   prod: payoneer live API program id
PAYONEER_PROGRAM_ID=BE_PROGRAM_ID_OF_PAYONEER
# payoneer api key
#   local, dev: payoneer sandbox api key
#   prod: payoneer live API key
PAYONEER_API_KEY=BE_PAYONEER_API_KEY
# payoneer api secret
#   local, dev: payoneer sandbox api secret
#   prod: payoneer live API secret
PAYONEER_API_SECRET=BE_PAYONEER_API_SECRET

# Azure durable functions base url. This will be used to start orchestrator function in Azure functions app
#   local: functions base url of lc-func-prod app
#   dev: functions base url of lc-func-prod app
#   prod: functions base url of lc-func-prod app
AZURE_FUNCAPP_BASE_URL=https://lc-func-local.azurewebsites.net
# Azure durable functions host API key. This will be passed into x-functions-key header when making an API call
#   local: this is not required when testing locally. When testing with lc-func-local app host api key of that
#          app should be provided
#   dev: host api key of lc-func-dev app
#   prod: host api key of lc-func-prod
AZURE_FUNCAPP_API_KEY=BE_AZURE_FUNCAPP_API_KEY

# Uploadcare base url. This is base url or endpoint of uploadcare used to make all API calls
# This will be same for local, dev and prod as this is just uploadcare API base url which stays same through out
UPLOADCARE_BASE_URL=https://api.uploadcare.com
# Uplodacare public API. This is public API key that can be used to upload files from frontend. This is also used
# by backend as part of Authorization header to make API calls along with API secret
#   local: uploadcare public API key of dev project
#   dev:   uploadcare public API key of dev project
#   prod:  uploadcare public API key of prod project
UPLOADCARE_PUBLIC_API_KEY=e89348da1a9c7729c852
# Uploadcare API secrect key. This is secrect API key that will be used along with public API key to make REST API
# calls to uploadcare from backend
#   local: uploadcare secrect API key of dev project
#   dev:   uploadcare secrect API key of dev project
#   prod:  uploadcare secrect API key of prod project
UPLOADCARE_SECRET_API_KEY=BE_UPLOADCARE_SECRET_API_KEY

# CORS url for Access-Control-Allow-Origin. This url will set allow origin to subdomain. Which as a result would allow
# frontend to receive server side secure cookies when user logs in
#   local: 127.0.0.1 url for uit/uis student's app. URL that we will run our new react app on
#   dev:   dev url for uit/uis student's app. URL that we will run our new dev react app on
#   prod:  prod url for uit/uis student's app. URL that we will run our new prod react app on
CORS_ACCESS_CONTROL_ALLOW_ORIGIN=https://127.0.0.1:4007

# this will be main domain for refresh token cookie. Once we set this as cookie domain refresh token cookie should be
# available to all sub domains
#   local: 127.0.0.1
#   dev: .speakfluentlytoday.com
#   prod: .languageconvo.com
REFRESH_TOKEN_COOKIE_DOMAIN=127.0.0.1

#
# paypal
#

# paypal API base url, this is base url endpoint to make all API calls to paypal
#   local:  https://api-m.sandbox.paypal.com
#	dev:    https://api-m.sandbox.paypal.com
#	prod:   https://api-m.paypal.com
PAYPAL_API_BASE_URL=https://api-m.sandbox.paypal.com

# paypal API client id
#   local: paypal client id of our dev paypal account
#   dev:   paypal client id of our dev paypal account
#   prod:  paypal client id of our production paypal account
PAYPAL_CLIENT_ID=AVfRB0lYOLVB6yd3MTwf785BccUuEi2kc25jLRUnjHhIGRiizswxbcOYD7YZjIWvwVeT5CTaVaTtTpKw

# paypal API secret, note that paypal secret should always be kept a secret and should never be shared anywhere or made
# public by accident. As anyone who has access to paypal secret can make API calls to our paypal account as though
# those API calls were made by us
#   local: paypal secret for our dev paypal account
#   dev:   paypal secret for our dev paypal account
#   prod:  paypal secret of our production paypal account
PAYPAL_API_SECRET=BE_PAYPAL_API_SECRET

#
# pusher, realtime messaging
#

# note that the key and cluser are not secrets, they're exposed to the frontend. secret and app id though should
# be treated as sensitive secrets
#  local, dev: the values below, our pusher dev app values
#  prod: our pusher prod app values
PUSHER_KEY=0b29027c9c60b429f94c
PUSHER_CLUSTER=mt1
PUSHER_SECRET=BE_PUSHER_SECRET
PUSHER_APPID=BE_PUSHER_APPID

#
# vonage, video api - for group lessons
#

# note that vonage_key is not a secret, it's exposed to the frontend. secret though is obviously a sensitive secret
#  local, dev: the values below, our vonage dev app values
#  prod: our vonage prod app values
VONAGE_KEY=45816022
VONAGE_SECRET=BE_VONAGE_SECRET

#
# vonage, video api - for group lessons
#
VONAGE_GROUP_KEY=47765381
VONAGE_GROUP_SECRET=BE_VONAGE_GROUP_SECRET

#
# aws
#

# these are settings for the aws js sdk, telling it to use, and where to find our configuration
# file. it is not in the default ~/ folder due to how nestjs puts files into /api folder
AWS_SDK_LOAD_CONFIG=true
AWS_CONFIG_FILE=/api/.aws/config

# this sets the region to be used when instantiating a new aws client. can be overridden when creating a client
AWS_REGION=us-west-2

# our aws credentials for the iam user named iamuser-backend-superadmin. this is an iam user that has extensive
# privileges that the backend needs to do its work.
# when instantiating an aws client these will be used by default. you can of course override these during client creation
AWS_ACCESS_KEY_ID=BE_AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY=BE_AWS_SECRET_ACCESS_KEY

# the s3 bucket fuploads-temp. used for the new user file uploads workflow
AWS_S3_BUCKETFUPLOADSTEMP=fuploads-temp-2bc02bc

# connection to our database
# our backend repo *only* uses this for a very limited use case: creating advisory locks. all other database access
# happens via hasura. for our backend to create advisory locks, it needs a direct connection to the db, thus this
# db user. note that this db user is very limited, it only has "connect" permissions on the db; it cannot select
# or update any data
DB_HOST=BE_DB_HOST_URL
DB_NAME=devdb
DB_USER=BE_DB_USERNAME
DB_PASS=BE_DB_PASSWORD

#
# Stripe API env variables
#
# Description of individual variable that we need is given below
#
# {{STRIPE_API_SECRET}}
# Stripe secret is needed in order to create an instance of Stripe class, and Stripe class instance is what we will use
# in order to make all API calls to Stripe
#
# {{STRIPE_WEBHOOK_SECRET}}
# We use webhook secret in order to verify signature of incoming webhooks before trusting any incoming events
#
# {{STRIPE_PRODUCT_PRICEID}}
# We need a valid priceId in order to create a subscription for user
#
# {{STRIPE_GROUPCLASSES_FEATID}}
# We need this to verify whether user is entitled to group classes
#
# {{STRIPE_PURCHASE_SUCCESS_URL}}
# User will return to success url after they have successfully made a purchase
#
# {{STRIPE_PURCHASE_SUCCESS_URL}}
# This will be link to back button in Stripe checkout form
#
# {{STRIPE_PORTAL_RETURN_URL}}
# This will be link to back button in “view subscription history” and “update payment method” form
#
# This needs to be a JSON Stripe env var having all required env vars in JSON format
# Example:
# STRIPE='{"apiSecret": "{{STRIPE_API_SECRET}}", "webhookSecret": "{{STRIPE_WEBHOOK_SECRET}}", "productPriceId": "{{STRIPE_PRODUCT_PRICEID}}", "groupclassesFeatId": "{{STRIPE_GROUPCLASSES_FEATID}}", "purchaseSuccessUrl": "{{STRIPE_PURCHASE_SUCCESS_URL}}", "purchaseCancelUrl": "{{STRIPE_PURCHASE_CANCEL_URL}}", "portalReturnUrl": "{{STRIPE_PORTAL_RETURN_URL}}"}'
STRIPE=BE_STRIPE_ENVVAR

# Open AI API env variables
#
# Description of individual variable that we need is given below
#
# {{OPENAI_API_KEY}}
# This is openai API key, this is needed in order to make any openai API calls
#
# This needs to be a JSON OpenAI env var having all required env vars in JSON format
# Example:
# OPENAI='{"apiKey": "{{OPENAI_API_KEY}}"}'
OPENAI=BE_OPENAI_ENVVAR

#
# Mux Video Env Vars
# This is json which contains the vars needed for using Mux video. It currently takes the following form:
# MUX='{"accessToken": "{{MUX_ACCESS_TOKEN}}", "secretKey": "{{MUX_SECRET_KEY}}"}'
MUX=BE_MUX_ENVVAR
